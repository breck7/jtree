// Note: this is an MVP of Scroll Datasets for initial experimentation and to test the syntax. Few features are implemented yet.

valueCell
 highlightScope comment

measureTypeCell
 extends enumCell
 enum string int bool url uid float enum

conceptStartParser
 crux ::
 description Begins a concept.
 extends abstractCommentParser
 javascript
  compile() {
   return `<hr>`
  }

measureNameCell
 highlightScope keyword

measurementParser
 description Add a measurement to a concept. Also used for defining measures.
 cells measureNameCell
 pattern ^[a-zA-Z0-9_]+:( |$)
 catchAllCellType valueCell
 extends abstractCommentParser
 javascript
  compile() {
   return `<div>${Utils.linkify(this.getLine())}</div>`
  }
 example
  ::
  id: earth
  order: 3

printDatasetParser
 description Print the dataset in a page into an HTML table.
 cruxFromId
 extends abstractCommentParser
 javascript
   compile() {
   // A hacky but simple way to do this for now.
   const node = this.appendSibling("table \t", this.parent.file.makeDataset("tsv"))
   const html = node.compile()
   node.destroy()
   return html
   }

writeDatasetParser
 cruxFromId
 description Write a dataset file to disk.
 extends abstractCommandParser

tabularDataParser
 description Root lines with tabs are parsed as tsv data and printed as tables.
 cells anyCell
 pattern \t
 catchAllCellType anyCell
 extends abstractCommentParser
 javascript
  compile() {
   // If this is not the first line in the table, do nothing, since the first line
   // prints the table
   // todo: remove this feature. make it explicit that you have to add a keyword to print a root table. otherwise should be silent
   if (!this.isFirst) return ""
   let table = this.getLine()
   let line = this
   while (line.next.isTabularData) {
     table += "\n" + line.next.getLine()
     line = line.next
     if (line === this)
       break
   }
   const node = this.appendSibling("table \t", table)
   const html = node.compile()
   node.destroy()
   return html
  }
  get isFirst() {
    return !this.previous.isTabularData
  }
  compileTextVersion() {
    return this.isFirst ? `[Table Omitted]` : ""
  }
  isTabularData = true
 example
  // The below lines will print as a table
  Index Name
  1 Thermos
